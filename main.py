import discord
from discord import ui, app_commands
from discord.ext import commands, tasks
from discord import TextChannel
import random, uuid, requests, asyncio, time, threading, os, platform, psutil
from flask import Flask
from datetime import datetime, timedelta
import aiohttp
import hashlib
import logging
from rich.console import Console
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TaskProgressColumn
from rich import box
from rich.table import Table
from rich.panel import Panel
from humanize import naturaltime
import json
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from cryptography.fernet import Fernet
from loguru import logger
import httpx
# ---------------- CONFIG ----------------
TOKEN = os.getenv("DISCORD_TOKEN")
GUILD_ID = 1405933240212258816
OWNER_ID = 1065954764019470420

# ---------------- Channel ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ----------------
ALERT_CHANNEL_ID = 1415593892585406525
CHANNEL_UI_ID = 1415555699454246985
CHANNEL_STATUS_ID = 1415345695069835267
CHANNEL_GUIDE_ID = 1415555569753788426
STATUS_DASHBOARD_ID = 1417378674537267333  # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå

# ---------------- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Bot Management ----------------
bot_start_time = datetime.utcnow()
console = Console()

# ---------------- Security ‡πÅ‡∏•‡∏∞ Token Protection ----------------
BOT_FINGERPRINT = hashlib.sha256(f"{OWNER_ID}_{GUILD_ID}_NEKTRI_BOT".encode()).hexdigest()[:16]
AUTHORIZED_INSTANCE = True
LAST_HEARTBEAT = datetime.utcnow()

# ---------------- Professional Logging ----------------
logger.remove()  # ‡∏•‡∏ö default handler
logger.add("logs/bot.log", rotation="1 MB", retention="7 days", level="INFO")
logger.add("logs/error.log", rotation="1 MB", retention="7 days", level="ERROR")
logger.info(f"Bot initializing with fingerprint: {BOT_FINGERPRINT}")

# ---------------- Status Tracking ----------------
active_ngl_sessions = {}
server_stats = {
    'uptime_start': bot_start_time,
    'commands_executed': 0,
    'messages_processed': 0,
    'errors_count': 0,
    'last_restart': None
}

# ---------------- ‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏•‡∏ö ----------------
KEEP_CHANNELS = [
    ALERT_CHANNEL_ID,
    CHANNEL_UI_ID,
    CHANNEL_STATUS_ID,
    CHANNEL_GUIDE_ID
]

# ---------------- ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡πà‡∏° ----------------
RANDOM_MESSAGES = [
    "‡πÄ‡∏á‡∏µ‡πà‡∏¢‡∏ô‡∏û‡πà‡∏≠‡∏°‡∏∂‡∏á‡∏≠‡∏∞","‡∏à‡∏±‡∏ö‡∏¢‡∏±‡∏î‡∏ô‡∏∞‡∏Ñ‡∏ß‡∏¢","‡∏•‡∏á‡∏™‡∏≠‡∏ï‡∏£‡∏µ‡πà‡∏´‡∏≤‡∏û‡πà‡∏≠‡∏°‡∏∂‡∏á‡πÄ‡∏ñ‡∏≠‡∏∞","‡∏û‡πà‡∏≠‡πÄ‡πÄ‡∏°‡πà‡∏û‡∏µ‡πà‡∏ï‡∏≤‡∏¢‡∏¢‡∏±‡∏á",
    "‡∏Å‡∏π  nektri ","‡∏û‡πà‡∏≠‡∏°‡∏∂‡∏á‡∏ï‡πà‡∏≤‡∏¢‡∏•‡∏π‡∏Å‡∏≠‡∏µ‡πÄ‡∏´‡∏µ‡πâ‡∏¢","‡πÑ‡∏õ‡∏ï‡πà‡∏≤‡∏¢‡πÄ‡∏ñ‡∏≠‡∏∞","‡∏´‡∏µ","‡∏•‡∏π‡∏Å‡∏´‡∏°‡∏≤","‡∏•‡∏∏‡∏Å‡πÄ‡∏°‡πà‡∏ï‡πà‡∏≤‡∏¢",
    "‡∏Å‡∏πNEKTRI","‡∏°‡∏≤‡∏î‡∏¥‡∏™‡∏±‡∏™","‡∏≠‡∏¢‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏á‡πÄ‡πÄ‡∏ï‡πà‡∏õ‡∏≤‡∏Å","‡∏°‡∏∂‡∏á‡πÇ‡∏î‡∏ô‡πÄ‡πÄ‡∏•‡πâ‡∏ß","‡∏ö‡∏±‡∏Å‡∏Ñ‡∏ß‡∏¢","‡∏•‡∏∏‡∏Å‡∏≠‡∏µ‡∏™‡∏±‡∏™",
    "‡∏™‡∏±‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏°‡∏≤","‡∏°‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏î‡∏µ‡πÄ‡∏≠‡∏á","‡πÄ‡∏Å‡∏¥‡∏î‡∏°‡∏≤‡∏´‡∏≤‡∏û‡πà‡∏≠‡∏°‡∏∂‡∏á‡∏≠‡∏∞","‡∏≠‡∏µ‡∏™‡∏≤‡∏ô‡∏à‡∏±‡∏î","‡∏°‡∏≤‡∏î‡∏¥‡∏à‡∏∞","‡∏ô‡∏±‡∏î‡∏ï‡∏µ‡∏õ‡πà‡∏≤‡∏ß",
    "‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏Å‡∏π‡∏£‡∏≠‡∏•‡∏∞","‡πÉ‡∏à‡πã‡∏Å‡∏≤‡∏Å‡∏à‡∏±‡∏î","‡∏ß‡πâ‡∏≤‡∏ß‡πÜ‡πÜ‡πÜ‡∏ö‡∏π‡∏´","‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏î‡∏¥","‡πÑ‡∏õ‡∏ï‡πà‡∏≤‡∏¢","‡∏™‡∏≤‡∏ò‡∏∏1111","‡∏•‡∏π‡∏Å‡∏Å‡∏≤‡∏Å",
    "‡∏õ‡∏≤‡∏Å‡πÄ‡πÄ‡∏ï‡∏Å","‡∏ô‡πà‡∏≤‡πÇ‡∏î‡∏ô‡∏™‡∏ô‡∏ï‡∏µ‡∏ô","‡∏´‡∏°‡∏î‡∏´‡∏µ","‡∏Ç‡∏≤‡∏¢‡∏´‡∏µ‡∏´‡∏£‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏≥","‡∏£‡∏±‡πà‡∏ß‡πÑ‡∏´‡∏°","‡∏´‡∏ô‡∏π‡πÄ‡∏á‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏∞‡πÄ‡∏™‡∏µ‡πà‡∏¢",
    "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏¢‡πá‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢","‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡πÄ‡∏ü‡∏ô‡πÄ‡πÄ‡∏°‡πà‡∏°‡∏∂‡∏á‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°","‡∏Ñ‡∏ß‡∏¢","‡∏™‡∏±‡∏™","‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏≠‡πà‡∏≠‡∏ô‡∏à‡∏±‡∏î","‡∏°‡∏≤",
    "‡∏ó‡∏≥‡πÑ‡∏£‡∏´","‡∏Å‡∏π‡∏™‡∏±‡πà‡∏á‡∏á‡∏≤‡∏ô","‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏•‡∏∞","‡πÄ‡πÅ‡∏•‡∏Å‡∏´‡πÉ‡∏±‡πÄ‡πÑ‡∏´‡πÉ","‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏´‡∏£","‡∏Å‡∏Å‡∏ô‡∏´","‡∏Ç‡∏≠‡πÄ‡∏¢‡πá‡∏î‡πÄ‡πÄ‡∏°‡πà‡∏°‡∏∂‡∏É",
    "‡∏´‡∏≥‡πÄ‡∏Ç‡πá‡∏É","‡πÄ‡πÄ‡∏ï‡∏Å‡πÉ‡∏ô‡∏õ‡∏∞","‡∏Ñ‡∏ß‡∏¢‡πÄ‡πÄ‡∏Ç‡πá‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏ô‡∏∞","‡πÑ‡∏°‡πà‡πÑ‡∏´‡∏ß‡πÄ‡πÄ‡∏ï‡∏Å‡∏•‡∏∞",'‡πÄ‡∏≠‡∏≤‡∏£‡∏π‡∏õ‡πÄ‡πÄ‡∏°‡πà‡∏°‡∏∂‡∏á‡∏°‡∏≤‡πÄ‡πÄ‡∏ï‡∏Å‡πÉ‡∏ô‡∏•‡∏∞',
    "‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏°‡∏≤‡∏Å","‡πÑ‡∏õ‡πÑ‡∏´‡∏ô","‡πÑ‡∏õ‡∏û‡πà‡∏≠‡∏á‡πÑ‡∏´‡∏°","‡∏û‡πà‡∏≠‡∏°‡∏∂‡∏á‡πÑ‡∏õ‡πÑ‡∏´‡∏ô","‡∏•‡∏π‡∏Å‡∏≠‡∏µ‡∏õ‡∏≠‡∏ö","‡∏û‡πà‡∏≠‡∏°‡∏∂‡∏á‡∏™‡∏±‡πà‡∏á‡∏™‡∏≠‡∏ô‡∏õ‡∏∞",
    "‡∏£‡∏±‡πà‡∏ß‡∏´‡∏µ","‡πÑ‡∏≠‡πâ‡∏™‡∏±‡∏î","‡πÑ‡∏≠‡πâ‡πÄ‡∏´‡∏µ‡πâ‡∏¢","‡∏°‡∏∂‡∏á‡∏ö‡∏±‡∏Å‡∏´‡∏≥","‡∏™‡∏±‡∏ô‡∏î‡∏≤‡∏ô‡∏´‡∏°‡∏≤","‡∏≠‡∏µ‡πÄ‡∏´‡∏µ‡πâ‡∏¢‡πÄ‡∏≠‡πä‡∏¢","‡πÑ‡∏≠‡πâ‡∏™‡∏±‡∏™‡∏™‡∏±‡∏™",
    "‡∏°‡∏∂‡∏á‡πÄ‡∏ô‡πà‡∏≤","‡∏´‡∏±‡∏ß‡∏Ñ‡∏ß‡∏¢","‡∏°‡∏∂‡∏á‡∏Å‡∏≤‡∏Å","‡∏≠‡∏µ‡∏™‡∏±‡∏™","‡πÑ‡∏≠‡πâ‡∏ö‡∏±‡∏î‡∏ã‡∏ö","‡∏™‡∏±‡∏ô‡∏Ç‡∏ß‡∏≤‡∏ô‡∏´‡∏°‡∏≤","‡πÑ‡∏≠‡πâ‡∏•‡∏π‡∏Å‡∏´‡∏°‡∏≤","‡∏Ñ‡∏ß‡∏¢‡∏°‡∏∂‡∏á",
    "‡∏°‡∏∂‡∏á‡∏™‡∏±‡∏™‡∏à‡∏£‡∏¥‡∏á","‡∏≠‡∏µ‡∏Ñ‡∏ô‡πÇ‡∏á‡πà","‡∏°‡∏∂‡∏á‡πÑ‡∏£‡πâ‡∏Ñ‡πà‡∏≤","‡πÑ‡∏≠‡πâ‡∏Ñ‡∏ß‡∏≤‡∏¢","‡∏Å‡∏≤‡∏Å‡∏™‡∏±‡∏™","‡∏™‡∏±‡∏î‡πÄ‡∏´‡∏µ‡πâ‡∏¢"
]

COOLDOWN = 1  # 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
stop_sending = False
last_sent = {}

# ---------------- Auto-Moderation Channels ----------------
PROTECTED_CHANNELS = [
    ALERT_CHANNEL_ID,
    CHANNEL_UI_ID, 
    CHANNEL_STATUS_ID,
    CHANNEL_GUIDE_ID,
    STATUS_DASHBOARD_ID
]

# ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)
CHAT_ALLOWED_CHANNELS = [
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° channel IDs ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    # 1234567890123456789  # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Chat Channel
]

# ---------------- Helpers ----------------
def random_device_id():
    return str(uuid.uuid4())

def random_user_agent():
    return f"Mozilla/5.0 (iPhone; CPU iPhone OS {random.randint(14,17)}_0 like Mac OS X)"

async def alert_server(bot, message: str):
    try:
        channel = bot.get_channel(ALERT_CHANNEL_ID)
        if channel:
            await channel.send(f"‚ö†Ô∏è [‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏∞‡∏ö‡∏ö] {message}")
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ: {e}")

# ---------------- NGL Sending ----------------
async def send_ngl(bot, username, amount, speed, message=None, is_random=True):
    global stop_sending, last_sent
    now = time.time()
    if username in last_sent and now - last_sent[username] < COOLDOWN:
        channel = bot.get_channel(CHANNEL_STATUS_ID)
        await channel.send(f"‚ùå {username} ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏≠‡∏µ‡∏Å {round(COOLDOWN - (now - last_sent[username]))} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        return

    stop_sending = False
    sent, fail = 0, 0
    start_time = time.time()
    channel = bot.get_channel(CHANNEL_STATUS_ID)

    # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
    async for msg in channel.history(limit=50):
        if msg.id not in KEEP_CHANNELS:
            await msg.delete()

    status_message = await channel.send(f"üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏¥‡∏á {username}...")

    for i in range(min(amount,200)):
        if stop_sending:
            await status_message.edit(content=f"‚èπ ‡∏´‡∏¢‡∏∏‡∏î‡∏¢‡∏¥‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏≤‡∏á! ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {sent} ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {fail}")
            break
        try:
            text = message if not is_random else random.choice(RANDOM_MESSAGES)
            payload = {"username": username,"question": text,"deviceId": random_device_id()}
            headers = {"User-Agent": random_user_agent(),"Content-Type":"application/json"}
            res = requests.post("https://ngl.link/api/submit", json=payload, headers=headers)
            if res.status_code==200: sent+=1
            else: fail+=1
            await status_message.edit(content=f"üöÄ ‡∏¢‡∏¥‡∏á {username}...\n‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {sent}\n‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {fail}\n‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {text}")
            await asyncio.sleep(speed*random.uniform(0.8,1.2))
        except Exception as e:
            fail+=1
            await status_message.edit(content=f"üöÄ ‡∏¢‡∏¥‡∏á {username}...\n‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {sent}\n‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {fail}\nException: {e}")
            await alert_server(bot, f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏¢‡∏¥‡∏á NGL: {e}")

    duration = round(time.time()-start_time,2)
    await status_message.edit(content=f"‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!\n‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {sent}\n‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {fail}\n‚è± ‡πÄ‡∏ß‡∏•‡∏≤: {duration} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    channel_success = bot.get_channel(CHANNEL_GUIDE_ID)
    if channel_success:
        await channel_success.send(f"üì¢ ‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á {username} ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {duration} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‚úÖ")
    last_sent[username] = time.time()

# ---------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå ----------------
def is_server_owner(interaction: discord.Interaction) -> bool:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)"""
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OWNER_ID ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ
    if interaction.user.id == OWNER_ID:
        return True
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏à‡∏£‡∏¥‡∏á
    if interaction.guild and interaction.guild.owner_id == interaction.user.id:
        return True
    
    return False

async def owner_only_check(interaction: discord.Interaction) -> bool:
    """Decorator check ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á"""
    if not is_server_owner(interaction):
        await interaction.response.send_message("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!", ephemeral=True)
        return False
    return True

# ---------------- Discord Bot ----------------
intents = discord.Intents.all()
bot = commands.Bot(command_prefix="!", intents=intents)

# ---------------- Slash Commands ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏ó ----------------
@bot.tree.command(name="bot-status", description="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏≠‡∏ó‡πÅ‡∏•‡∏∞‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå")
async def bot_status(interaction: discord.Interaction):
    if not await owner_only_check(interaction):
        return
    
    uptime = datetime.utcnow() - bot_start_time
    days = uptime.days
    hours, remainder = divmod(uptime.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö
    cpu_percent = psutil.cpu_percent()
    memory = psutil.virtual_memory()
    disk = psutil.disk_usage('/')
    
    embed = discord.Embed(
        title="ü§ñ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏≠‡∏ó‡πÅ‡∏•‡∏∞‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå",
        color=discord.Color.green(),
        timestamp=datetime.utcnow()
    )
    
    embed.add_field(name="üü¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏≠‡∏ó", value="‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå", inline=True)
    embed.add_field(name="‚è±Ô∏è Uptime", value=f"{days}d {hours}h {minutes}m {seconds}s", inline=True)
    embed.add_field(name="üèì Ping", value=f"{round(bot.latency * 1000)}ms", inline=True)
    
    embed.add_field(name="üíª CPU", value=f"{cpu_percent}%", inline=True)
    embed.add_field(name="üß† RAM", value=f"{memory.percent}% ({memory.used // 1024**3}GB/{memory.total // 1024**3}GB)", inline=True)
    embed.add_field(name="üíæ Disk", value=f"{disk.percent}% ({disk.used // 1024**3}GB/{disk.total // 1024**3}GB)", inline=True)
    
    embed.add_field(name="üñ•Ô∏è OS", value=platform.system(), inline=True)
    embed.add_field(name="üêç Python", value=platform.python_version(), inline=True)
    embed.add_field(name="üîß Discord.py", value=discord.__version__, inline=True)
    
    await interaction.response.send_message(embed=embed)

@bot.tree.command(name="force-online", description="‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤")
async def force_online(interaction: discord.Interaction):
    if not await owner_only_check(interaction):
        return
    
    await bot.change_presence(
        activity=discord.Activity(
            type=discord.ActivityType.watching,
            name="üìä ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå 24/7"
        ),
        status=discord.Status.online
    )
    
    embed = discord.Embed(
        title="‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description="‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á",
        color=discord.Color.green()
    )
    
    await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="server-check", description="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå")
async def server_check(interaction: discord.Interaction, url: str = None):
    if not await owner_only_check(interaction):
        return
    
    await interaction.response.defer()
    
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà URL ‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ Flask server ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    if url is None:
        url = "http://localhost:5000"
    
    if not url.startswith(('http://', 'https://')):
        url = f'https://{url}'
    
    try:
        start_time = asyncio.get_event_loop().time()
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as response:
                response_time = round((asyncio.get_event_loop().time() - start_time) * 1000)
                
                status_emoji = "üü¢" if response.status == 200 else "üü°"
                status_color = discord.Color.green() if response.status == 200 else discord.Color.yellow()
                
                embed = discord.Embed(
                    title=f"{status_emoji} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå",
                    color=status_color,
                    timestamp=datetime.utcnow()
                )
                embed.add_field(name="üåê URL", value=url, inline=False)
                embed.add_field(name="üìä Status Code", value=response.status, inline=True)
                embed.add_field(name="‚ö° Response Time", value=f"{response_time}ms", inline=True)
                
    except asyncio.TimeoutError:
        embed = discord.Embed(
            title="üî¥ ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á",
            description="Request timeout - ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ",
            color=discord.Color.red()
        )
    except Exception as e:
        embed = discord.Embed(
            title="üî¥ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
            description=f"Error: {str(e)}",
            color=discord.Color.red()
        )
    
    await interaction.followup.send(embed=embed)

@bot.tree.command(name="restart-bot", description="‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏ö‡∏≠‡∏ó‡πÅ‡∏•‡∏∞‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ß‡∏¥‡∏™")
async def restart_bot(interaction: discord.Interaction):
    if not await owner_only_check(interaction):
        return
    
    embed = discord.Embed(
        title="üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏ö‡∏≠‡∏ó",
        description="‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÉ‡∏ô 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...",
        color=discord.Color.orange()
    )
    
    await interaction.response.send_message(embed=embed, ephemeral=True)
    
    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á status channel
    status_channel = bot.get_channel(STATUS_DASHBOARD_ID)
    if status_channel and isinstance(status_channel, TextChannel):
        alert_embed = discord.Embed(
            title="üîÑ ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏£‡∏∞‡∏ö‡∏ö",
            description=f"Admin {interaction.user.mention} ‡∏™‡∏±‡πà‡∏á‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏ö‡∏≠‡∏ó - ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...",
            color=discord.Color.orange(),
            timestamp=datetime.utcnow()
        )
        await status_channel.send(embed=alert_embed)
    
    # ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏ö‡∏≠‡∏ó‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    await asyncio.sleep(5)
    import os
    os._exit(0)  # ‡∏õ‡∏¥‡∏î‡∏ö‡∏≠‡∏ó‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ workflow supervisor ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÉ‡∏´‡∏°‡πà

# ---------------- Auto Keep-Alive ‡πÅ‡∏•‡∏∞ Status Monitoring ----------------
@tasks.loop(minutes=5)  # ‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
async def keep_alive_task():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô keep-alive ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤"""
    try:
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏≠‡∏ó
        await bot.change_presence(
            activity=discord.Activity(
                type=discord.ActivityType.watching,
                name=f"üìä ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå 24/7 | Uptime: {(datetime.utcnow() - bot_start_time).days}d"
            ),
            status=discord.Status.online
        )
        
        # ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏õ‡∏¢‡∏±‡∏á status channel
        status_channel = bot.get_channel(STATUS_DASHBOARD_ID)
        if status_channel and isinstance(status_channel, TextChannel):
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì uptime
            uptime = datetime.utcnow() - bot_start_time
            days = uptime.days
            hours, remainder = divmod(uptime.seconds, 3600)
            minutes, _ = divmod(remainder, 60)
            
            # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö
            cpu_percent = psutil.cpu_percent()
            memory = psutil.virtual_memory()
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            embed = discord.Embed(
                title="üü¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå - ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå",
                color=discord.Color.green(),
                timestamp=datetime.utcnow()
            )
            
            embed.add_field(name="‚è±Ô∏è Uptime", value=f"{days}d {hours}h {minutes}m", inline=True)
            embed.add_field(name="üèì Ping", value=f"{round(bot.latency * 1000)}ms", inline=True)
            embed.add_field(name="üíª CPU", value=f"{cpu_percent}%", inline=True)
            embed.add_field(name="üß† RAM", value=f"{memory.percent}%", inline=True)
            embed.add_field(name="üîã Status", value="üü¢ ‡∏õ‡∏Å‡∏ï‡∏¥", inline=True)
            embed.add_field(name="üì° Connected", value="‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß", inline=True)
            
            embed.set_footer(text="‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ")
            
            # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
            async for message in status_channel.history(limit=10):
                if message.author == bot.user and "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" in (message.embeds[0].title if message.embeds else ""):
                    await message.delete()
                    break
            
            await status_channel.send(embed=embed)
            
    except Exception as e:
        print(f"‚ùå Keep-alive task error: {e}")

@tasks.loop(minutes=1)  # ‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ
async def health_check():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤"""
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö CPU ‡πÅ‡∏•‡∏∞ Memory
        cpu_percent = psutil.cpu_percent()
        memory = psutil.virtual_memory()
        
        # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏≤‡∏Å CPU ‡∏´‡∏£‡∏∑‡∏≠ Memory ‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
        if cpu_percent > 80 or memory.percent > 85:
            alert_channel = bot.get_channel(ALERT_CHANNEL_ID)
            if alert_channel and isinstance(alert_channel, TextChannel):
                embed = discord.Embed(
                    title="‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö",
                    color=discord.Color.orange(),
                    timestamp=datetime.utcnow()
                )
                
                if cpu_percent > 80:
                    embed.add_field(name="üî• CPU ‡∏™‡∏π‡∏á", value=f"{cpu_percent}%", inline=True)
                
                if memory.percent > 85:
                    embed.add_field(name="üß† RAM ‡∏™‡∏π‡∏á", value=f"{memory.percent}%", inline=True)
                
                embed.set_footer(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö")
                await alert_channel.send(embed=embed)
                
    except Exception as e:
        print(f"‚ùå Health check error: {e}")

@keep_alive_task.before_loop
async def before_keep_alive():
    await bot.wait_until_ready()

@health_check.before_loop  
async def before_health_check():
    await bot.wait_until_ready()

# ---------------- Modal ----------------
class NGLModal(ui.Modal, title="‡∏¢‡∏¥‡∏á NGL ‡∏£‡∏∞‡∏ö‡∏ö UI"):
    username_input = ui.TextInput(label="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ NGL", placeholder="example123")
    amount_input = ui.TextInput(label="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á (1-200)", default="10")
    speed_input = ui.TextInput(label="‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)", default="0.5")
    mode_input = ui.TextInput(label="‡πÇ‡∏´‡∏°‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (1 ‡∏™‡∏∏‡πà‡∏°, 2 ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á)")
    custom_message_input = ui.TextInput(label="‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏≠‡∏á (‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 2)", required=False)

    async def on_submit(self, interaction: discord.Interaction):
        username = self.username_input.value.strip()
        try: amount=int(self.amount_input.value.strip()); amount=max(1,min(200,amount))
        except: amount=10
        try: speed=float(self.speed_input.value.strip()); speed=max(0.1,speed)
        except: speed=0.5
        mode = self.mode_input.value.strip()
        message = self.custom_message_input.value.strip() if mode=="2" else None
        is_random = mode=="1"
        await interaction.response.send_message(f"üü¢ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏¢‡∏¥‡∏á {username}...", ephemeral=True)
        await send_ngl(bot, username, amount, speed, message, is_random)

# ---------------- View ----------------
class NGLView(ui.View):
    @ui.button(label="‡∏¢‡∏¥‡∏á NGL", style=discord.ButtonStyle.green)
    async def start_ngl(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(NGLModal())

    @ui.button(label="‡∏´‡∏¢‡∏∏‡∏î‡∏¢‡∏¥‡∏á", style=discord.ButtonStyle.red)
    async def stop_ngl(self, interaction: discord.Interaction, button: discord.ui.Button):
        global stop_sending
        stop_sending = True
        await interaction.response.send_message("‚èπÔ∏è ‡∏™‡∏±‡πà‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏¢‡∏¥‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", ephemeral=True)

# ---------------- on_ready ----------------
@bot.event
async def on_ready():
    print(f"Bot ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: {bot.user}")
    try: 
        await bot.tree.sync()
        print("Slash Commands Synced ‚úÖ")
    except Exception as e: 
        print(f"‚ùå Slash Commands Sync Error: {e}")

    # ‡πÄ‡∏£‡∏¥‡πà‡∏° keep-alive ‡πÅ‡∏•‡∏∞ monitoring tasks
    if not keep_alive_task.is_running():
        keep_alive_task.start()
        print("‚úÖ Keep-Alive Task ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
    
    if not health_check.is_running():
        health_check.start()
        print("‚úÖ Health Check Task ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    await bot.change_presence(
        activity=discord.Activity(
            type=discord.ActivityType.watching,
            name="üìä ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå 24/7"
        ),
        status=discord.Status.online
    )

    # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á UI ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
    ui_channel = bot.get_channel(CHANNEL_UI_ID)
    if ui_channel and isinstance(ui_channel, TextChannel):
        async for msg in ui_channel.history(limit=50):
            if msg.id not in KEEP_CHANNELS:
                await msg.delete()
        await ui_channel.send("üîò ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î‡∏¢‡∏¥‡∏á NGL:", view=NGLView())
    
    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    alert_channel = bot.get_channel(ALERT_CHANNEL_ID)
    if alert_channel and isinstance(alert_channel, TextChannel):
        startup_embed = discord.Embed(
            title="üü¢ ‡∏ö‡∏≠‡∏ó‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
            description="‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏ö Keep-Alive ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß",
            color=discord.Color.green(),
            timestamp=datetime.utcnow()
        )
        await alert_channel.send(embed=startup_embed)

# ---------------- Keep-Alive (Flask) ----------------
app = Flask('')

@app.route('/')
def home():
    return "Server is running!"

def run_flask():
    app.run(host='0.0.0.0', port=5000)

# ---------------- Run Bot + Flask 24/7 ----------------
threading.Thread(target=run_flask).start()  # ‡∏£‡∏±‡∏ô Flask ‡πÅ‡∏ö‡∏ö background
if TOKEN:
    bot.run(TOKEN)
else:
    print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö DISCORD_TOKEN ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°!")
